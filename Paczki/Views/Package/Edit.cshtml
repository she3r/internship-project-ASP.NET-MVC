@using System.Text.Json;
@using System.Text.Json.Serialization;
@using Newtonsoft.Json;
@using Paczki.Models;
@model EditPackageContentsModelView;
@{
    int currPackageID = Model.Package.PackageId;
    int numPackages = Enumerable.Count(Model.Query);
    int pageSize = 5;
    ViewData["Title"] = "Edit";
    var numPages = Math.Ceiling((double) numPackages/pageSize);
    var currPage = 1;
    var deliveryCount = 1;
    var maxId = getMaxId();

    //string jsonString = JsonConvert.SerializeObject(Model.Query, Formatting.None, new JsonSerializerSettings
    //        { NullValueHandling = NullValueHandling.Ignore, Formatting = Formatting.Indented, 
    //            ReferenceLoopHandling = ReferenceLoopHandling.Ignore });
}
@functions{
    int getMaxId()
    {
        var maxId = Model.Query.MaxBy(item => item.Id);
        if(maxId is null)
        {
            return 0;
        }
        return (int) maxId.Id;
    }
}

<h1>Edytowanie paczek</h1>
<div class="w-75 btn-group" role="group">
    <a asp-controller="Package" asp-action="EditPackageOnly" asp-route-id="@Model.Package.PackageId">Edytuj tę paczkę</a>
</div>

<table class="table table-bordered table-striped" style="width:100%">
    <tr>
        <th>ID</th>
        <td>@Model.Package.PackageId</td>
    </tr>
    <tr>
        <th>Nazwa</th>
        <td>@Model.Package.Name</td>
    </tr>
    <tr>
        <th>Opened</th>
        <td>@Model.Package.Opened.ToString()</td>
    </tr>
    <tr>
        <th>CreationDateTime</th>
        <td>@Model.Package.CreationDateTime.ToString()</td>
    </tr>
    <tr>
        <th>ClosedDateTime</th>
        <td>@Model.Package.ClosedDateTime</td>
    </tr>
    <tr>
        <th>DestinationCity</th>
        <td>@Model.Package.DestinationCity</td>
    </tr>

</table>

<form method="post" id="delivery-post-all" asp-action="HandleEditDeliveries" asp-controller="Package" style="width:100%">
    <input class="form-control" type="text" name="delivery-name" id="delivery-name" style="width:30%;display:inline-block" placeholder="Tu wpisz nazwę nowej przesyłki" />
    <input class="form-control" type="number" step="0.01" name="delivery-weight" id="delivery-weight" style="width:25%;display:inline-block" placeholder="Tu wpisz wagę nowej przesyłki" />
    <a class="btn btn-secondary" style="width:150px" onclick="addTemporaryDelivery()">
        Dodaj nową przesyłkę
    </a>
    <input type="hidden" id="json-static-deliveries-modified" name="json-static-deliveries-modified" value=""/>
    <input type="hidden" id="json-temp-deliveries" name="json-temp-deliveries" value="" />
    <input type="hidden" id="json-static-deliveries-to-delete" name="json-static-deliveries-to-delete" value=""/>
    <input type="hidden" name="package-id" value="@currPackageID" />
    <button class="btn btn-primary" type="submit" style="width:150px">
        Zatwierdź wszystkie
    </button>
</form>

<h2>Lista przesyłek zarejestrowanych dla powyższej paczki:</h2>
<table class="table table-bordered table-striped" style="width:100%" id="deliveryTable">
    <thead>
        <tr>
                <th>Id</th>
                <th>Name</th>
                <th>CreationDateTime</th>
                <th>Weight</th>
        </tr>
    </thead>
    <tbody>
    @foreach(var delivery in Model.Query)
    {
        <tr>
            <td>
                @delivery.Id
            </td>
            <td id="delivery-cell-name-id-@delivery.Id">
                @delivery.Name          
            </td>
            <td>
                @delivery.CreationDateTime.ToString()
            </td>
            <td id="delivery-cell-weight-id-@delivery.Id">
                @delivery.Weight
            </td>
            <td>
                    <a class="edit-delivery" style="cursor:pointer" data-id=@delivery.Id >Edytuj</a>
            </td>
            <td>
                    <a class="delete-delivery" style="cursor:pointer" data-id=@delivery.Id>Usuń</a>
            </td>
        </tr>
    }
    </tbody>
</table>
<form action="javascript:void(0);" id="delivery-modify" style="width:100%; display:none">
    <input class="form-control" type="text" id="edit-delivery-name" style="width:30%;display:inline-block" />
    <input class="form-control" type="number" step="0.01" id="edit-delivery-weight" style="width:25%;display:inline-block"/>
    <input type="hidden" id="edit-delivery-id" value="" />
    <button class="btn btn-primary" type="submit" style="width:150px" id="edit-delivery-accept">
        Zatwierdź zmianę
    </button>
    <button class="btn btn-primary" style="width:150px" id="edit-delivery-decline">
        Anuluj
    </button>
</form>

@section Scripts{

<script type="text/javascript">
    var _foundDeliveryCount;
    var _deliveryCount;
    var tempDeliveries = [];
    var _foundDeliveries;
    var modifiedFoundDeliveries = [];
    var toRemoveFoundDeliveriesIds = [];

    class Delivery{
        constructor(name,weight,id) 
        { 
            this.Name = name;
            this.Weight = weight;
            this.Id = id;
        }
        getName(){
            return this.Name;
        }
        setName(name){
            this.getName = name;
        }
        getWeight(){
            return this.Weight;
        }
        setWeight(weight){
            this.Weight = weight; 
        }
    }

    function getDeliveryArrayByDeliveryId(id){
        if(id <= _foundDeliveryCount){
            return _foundDeliveries;
        }
        else if(id < _deliveryCount){
            return tempDeliveries;
        }
        else{
            throw new Error('requesting package with non-existing id');
        }
    }

    function removeDeliveryFromArray(id){
            if (id <= _foundDeliveryCount) {
                modifiedFoundDeliveries = modifiedFoundDeliveries.filter(item => item.Id != id);
                _foundDeliveries = _foundDeliveries.filter(item => item.Id != id);
                toRemoveFoundDeliveriesIds.push(id);
            }
            else if (id < _deliveryCount) {
                tempDeliveries = tempDeliveries.filter(item => item.Id != id);
            }
            else {
                throw new Error('requesting package with non-existing id');
            }    
    }

    function updateLayoutDeliveriesTable(item){
            var id = parseInt(item["Id"]);
            $(`#delivery-cell-weight-id-${id}`).html(item.Weight);
            $(`#delivery-cell-name-id-${id}`).html(item.Name);
    }

    function _updateDeliveries(arr, item) {
        var id = item.Id;
        var index = arr.findIndex(x => x.Id == id);
        if (index == -1) {
            throw new Error('no such id!');
        }

        arr[index].Name = item.Name;
        arr[index].Weight = item.Weight;

    }

    function updateDeliveries(item){
            var id = parseInt(item["Id"]);
            _updateDeliveries(getDeliveryArrayByDeliveryId(id),item);
            updateLayoutDeliveriesTable(item);
    }
    function loadFoundDeliveries(){
            _foundDeliveryCount = parseInt('@maxId');
            Object.freeze(_foundDeliveryCount);
            _deliveryCount = _foundDeliveryCount + 1;
            var json = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Query, new JsonSerializerOptions(){
            ReferenceHandler = ReferenceHandler.IgnoreCycles
            }));
            _foundDeliveries = JSON.parse(JSON.stringify(json));
    }

    function saveTempDelivery(name, weight,tempID) {
            tempDeliveries.push(new Delivery(name,weight,tempID));
    }

    //function incrementPageChoice() {
    //        let currPageItem = parseInt($("#page-choice").val());
    //        if (currPageItem < @numPages) {
    //            $("#page-choice").val(currPageItem + 1);
    //        }

    //}
    //function decreasePageChoice() {
    //        let currPageItem = parseInt($("#page-choice").val());
    //        if (currPageItem > 1) {
    //            $("#page-choice").val(currPageItem - 1);
    //        }
    //}
    function addTemporaryDelivery() {
            var inputWeight = $("#delivery-weight").val();
            var inputName = $("#delivery-name").val();
            saveTempDelivery(inputName, inputWeight, _deliveryCount);

            $("#delivery-weight").val("");
            $("#delivery-name").val("");

            var tbodyRef = document.getElementById('deliveryTable').getElementsByTagName('tbody')[0];
            var newRow = tbodyRef.insertRow();

            var newCellID = newRow.insertCell();
            var newCellName = newRow.insertCell();
            newCellName.id = `delivery-cell-name-id-${_deliveryCount}`;
            var newCellDate = newRow.insertCell();
            var newCellWeight = newRow.insertCell();
            newCellWeight.id = `delivery-cell-weight-id-${_deliveryCount}`;
            var newCellEdition = newRow.insertCell();
            var newCellDelete = newRow.insertCell();

            var textNodeID = document.createTextNode(_deliveryCount.toString());
            var textNodeName = document.createTextNode(inputName);
            var textNodeDate = document.createTextNode("teraz!");
            var textNodeWeight = document.createTextNode(inputWeight);
            newCellEdition.innerHTML =
                `<a class="edit-delivery" style="cursor:pointer" data-id=${_deliveryCount}>Edytuj</a>`;

            newCellDelete.innerHTML =
                `<a class="delete-delivery" style="cursor:pointer" data-id=${_deliveryCount}>Usun</a>`;

            newCellID.appendChild(textNodeID);
            newCellName.appendChild(textNodeName);
            newCellDate.appendChild(textNodeDate);
            newCellWeight.appendChild(textNodeWeight);

            _deliveryCount++;
    }

    $(window).on('load',function(){ 
            loadFoundDeliveries(); 
            //modifiedDeliveries = [];
    });

    $("#delivery-post-all").on('submit', function () {
            $("#json-temp-deliveries").val(JSON.stringify(tempDeliveries, ['Name', 'Weight']));
            $("#json-static-deliveries-modified").val(JSON.stringify(modifiedFoundDeliveries));
            $("#json-static-deliveries-to-delete").val(JSON.stringify(toRemoveFoundDeliveriesIds));
            //alert(JSON.stringify(tempDeliveries, ['Name', 'Weight']));
            //alert(JSON.stringify(modifiedFoundDeliveries), ['Name','Weight','Id']);
            //return false;
            return true;
    });

    function findDelivery(arr,id){
        return arr.find(element => element.Id == id);
    }

    $('#deliveryTable').delegate(".edit-delivery", "click", function () {
        $("#delivery-modify").show();
        var deliveryId = parseInt($(this).data("id"));
        var delivery = findDelivery(getDeliveryArrayByDeliveryId(deliveryId),deliveryId);
        //alert(deliveryId); alert(_deliveryCount);
        $("#edit-delivery-name").val(delivery["Name"]);
        $("#edit-delivery-weight").val(delivery["Weight"]);
        $("#edit-delivery-id").val(deliveryId);

    });

        $('#deliveryTable').delegate(".delete-delivery", "click", function(){
            var deliveryId = parseInt($(this).data("id"));
            removeDeliveryFromArray(deliveryId);
            $(this).parent().parent().remove();

        });

    $("#delivery-modify").on("submit", function(){
        var modifiedName = $("#edit-delivery-name").val();
        var modifiedWeight = $("#edit-delivery-weight").val();
        var deliveryId = $("#edit-delivery-id").val();
        alert("curr delivery id=" + deliveryId);
        if (modifiedName != "" && modifiedWeight != "") {
            modifiedFoundDeliveries.push(new Delivery(modifiedName,modifiedWeight,deliveryId));
        }
        updateDeliveries(new Delivery(modifiedName,modifiedWeight,deliveryId));
        $("#edit-delivery-name").val("");
        $("#edit-delivery-weight").val("");
        $("#delivery-modify").css("display","none");
        return false;   // nie chcemy submitowac, wszystko w jsie jest robione
    })

</script>
}