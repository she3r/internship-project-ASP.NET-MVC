@model IndexPackageContentsModelView
@{
    int numPackages = Model.NumOfAllPackages;
    int pageSize = Model.NumPackagesOnPage;
    ViewData["Title"] = "Index";
    var numPages = Math.Ceiling((double)numPackages / pageSize);
    var currPage = Model.PageChoice;
    var maxID = getMaxId();

}

@functions {
    int getMaxId()
    {
        var maxId = Model.Query.MaxBy(item => item.PackageId);
        if (maxId is null)
        {
            return 0;
        }
        return (int)maxId.PackageId;
    }
}


@if (TempData["edit_operation"] != null)
{
    <h2>@TempData["edit_operation"]</h2>
}

<h1>Okno główne – lista paczek</h1>

@using(Html.BeginForm()){
    @Html.HiddenFor(model => model.NewPackagesJSON)
    @Html.HiddenFor(model => model.ToDeleteQueryPackageIDsJSON)
    @Html.HiddenFor(model => model.ToUpdateQueryPackagesJSON)
    @Html.LabelFor(model => model.ShowOpen,"pokazuj otwarte [TAK/NIE] ")
    @Html.RadioButtonFor(model => model.ShowOpen,true)
    @Html.RadioButtonFor(model => model.ShowOpen,false)
    <br/>
    @Html.LabelFor(model => model.ShowClosed,"pokazuj zamkniete [TAK/NIE] ")
    @Html.RadioButtonFor(model => model.ShowClosed,true)
    @Html.RadioButtonFor(model => model.ShowClosed,false)
    <br />

    <div class="p-2">
        <button class="btn btn-primary float-start" style="width:150px" formmethod="get" asp-action="FilterPackages" >Filtruj</button>
        <button class="btn btn-secondary float-end" style="width:300px" id="accept-all-button" formmethod="post" 
                asp-action="HandleEditPackages">Zatwierdź wszystkie zmiany</button>
        <br />
    </div>
    <br/><br/>
    <table id="packages-table" class="table table-bordered table-striped" style="width:100%">

        <thead>
            <tr>
                <th>Nazwa paczki</th>
                <th>Data utworzenia</th>
                <th>Data zamknięcia</th>
                <th>Czy otwarta?</th>
                <th>Miasto docelowe</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var package in Model.Query)
            {
                <tr id="row-@package.PackageId">
                    <td width="20%">
                        @package.Name
                    </td>
                    <td width="20%">
                        @package.CreationDateTime
                    </td>
                    <td width="20%">
                        @package.ClosedDateTime
                    </td>
                    <td width="5%" class="openedInfo">
                        @package.Opened
                    </td>
                    <td width="10%">
                        @package.DestinationCity
                        </td>
                    <td width="5%">
                        <div class="w-75 btn-group" role="group">
                            <a asp-controller="Package" class="edit-button" asp-action="Edit" asp-route-id="@package.PackageId">Edytuj</a>
                        </div>
                    </td>
                    <td width="5%">
                        <div class="w-75 btn-group" role="group">
                            <a class="open-button" onclick="openQueryPackage(@package.PackageId)">Otwórz</a>
                        </div>
                    </td>
                    <td width="5%">
                        <div class="w-75 btn-group" role="group">
                            <a class="close-button" onclick="closeQueryPackage(@package.PackageId)">Zamknij</a>
                        </div>
                    </td>
                    <td width="5%">
                        <div class="w-75 btn-group" role="group">
                            <a  class="delete-button" onclick="deleteQueryPackage(@package.PackageId)">Usuń</a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Modal -->
    <div class="modal" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Utwórz przesyłkę</h5>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label style="width:150px" for="NewPackageName" class="col-form-label">Nazwa paczki:</label>
                        <input type="text" class="form-control" id="NewPackageName">
@*                        @Html.LabelFor(model => model.NewPackageName,"Nazwa paczki:",new{style="width:150px"})
                        @Html.EditorFor(model => model.NewPackageName)*@
                    </div>
                    <div class="form-group">
                        <label for="NewPackageCity" class="col-form-label">Miejscowość docelowa:</label>
                        <input type="text" class="form-control" id="NewPackageCity">
@*                        @Html.LabelFor(model => model.NewPackageCity,"Miasto docelowe:",new{style="width:150px"})
                        @Html.EditorFor(model => model.NewPackageCity)*@
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
                    <button type="button" id="addPackageCandidate" class="btn btn-primary">Utwórz paczkę</button>
                </div>
            </div>
        </div>
    </div>
    <a type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">Dodaj nową paczkę</a>



    <p id="vertical-space"></p>
    <p id="vertical-space"></p>
    <p id="vertical-space"></p>
    <p id="vertical-space"></p>
    <p id="vertical-space"></p>
@*    <p id="vertical-space"></p>
    <p id="vertical-space"></p>
    <p id="vertical-space"></p>
    <p id="vertical-space"></p>*@
<div>
    @Html.LabelFor(model => model.PageChoice,"wybór strony")
    @Html.EditorFor(model => model.PageChoice, new {@class = "form-control page-choice-input", style="width:0.5cm", min="1"})
@*    <p id="vertical-space"></p>*@
@*        <input class="form-control page-choice-input" id="page-choice" name="pageChoice" type="number" value=@currPage style="width:2cm" />*@
@*        <button type="submit" style="cursor:pointer" class="btn btn-primary">zatwierdz</button>*@
    <br/><br/>
    <div class="btn-group" role="group">
        <button type="submit" formmethod="get" id="change-page-button" asp-action="TurnPage" class="btn btn-primary" style="cursor:pointer">zatwierdź stronę</button>
        <button type="button" class="btn btn-secondary" style="cursor:pointer" onclick="decreasePageChoice()" id="page-prev">poprzednia</button>
        <button type="button" class="btn btn-success" style="cursor:pointer" onclick="incrementPageChoice()" id="page-next">następna</button>
    </div>
@*        <input type="hidden" class="show-closed-input" value=@Model.ShowClosed.ToString() name="ShowClosed" checked>
    <input type="hidden" class="show-opened-input" value=@Model.ShowOpen.ToString() name="ShowOpen" checked>*@
</div>

}
<p>@pageSize przesylek na strone. @numPages stron do wyswietlenia.</p>

@section Scripts{
    <script type="text/javascript">
    var newPackages = [];    // Name: , DestinationCity:
    var isOpenedOnStart = [];
    var toDeleteQueryPackageIDs = [];
    var updatedQueryPackages = [];
    var tempIdCount = @(maxID + 1);
    const numToHide = 5;
    var hiddenEntities = 0;

        class Package {
            constructor(name, city, ID) {
                this.Name = name;
                this.City = city;
                this.TempId = ID;
            }
        }
        class PackageUpdateOpen{
            constructor(id,isOpened){
                this.Id = id;
                this.IsOpened = isOpened;
            }
        }


        function updateQueryPackage(queryID,isOpened){
            var index = updatedQueryPackages.findIndex(item => item.Id == queryID);
            if (index < 0) {
                updatedQueryPackages.push(new PackageUpdateOpen(queryID, isOpened));
            }
            else {
                updatedQueryPackages[index].IsOpened = isOpened;
            }
            updateLayoutIsOpened(queryID, isOpened);
        }

        function updateLayoutIsOpened(id, isOpened){
            $("#packages-table tr").each(function () {
                if ($(this).attr("id") == `row-${id}`) {
                    isOpened = isOpened.toString();
                    $(this).find(".openedInfo").text(isOpened.charAt(0).toUpperCase()
                        + isOpened.slice(1));   //capitalized True/False
                    $(this).find(".edit-button").removeClass("disabled");
                }
            });
        }

        function openQueryPackage(queryID){
            updateQueryPackage(queryID,true);
        }

        function closeQueryPackage(queryID) {
            updateQueryPackage(queryID,false);
        }

        $(window).on('load', function () {
            $("#PageChoice").attr("min", 1);
                $("#packages-table tr").each(function () {
                    var id = $(this).attr("id");
                    isOpenedOnStart.push({
                        "Id": id, "IsOpen": $(this).find(".openedInfo").text().replace(/[^0-9A-Z]+/gi, "")
                    });
            });
            
        });
        $("#addPackageCandidate").on("click", function(){
            if(newPackages.length >= 5){
                alert("Nie można dodać więcej niż 5 paczek bez zapisywania.");
                return false;
            }
            $("#exampleModal").modal('hide');

            var candidateName = $("#NewPackageName").val();
            var candidateCity = $("#NewPackageCity").val();
            $("#NewPackageName").val("");
            $("#NewPackageCity").val("");
            newPackages.push(new Package(candidateName, candidateCity, tempIdCount));
            tempIdCount++;
            pushNewPackageToTable();
        });

        function appendNewRowToTable(){
            var newRow = newPackages.slice(-1)[0];
            row = $(`<tr class='temp-package' id='row-${newRow.TempId}'></tr>`);
            nameCol = $(`<td>${newRow.Name}</td>`);
            dateBornCol = $("<td><strong>zatwierdź zmiany</strong></td>");
            dateClosedCol = $("<td><strong>zatwierdź zmiany</strong></td>");
            isOpenedCol = $("<td><strong>True</strong></td>");
            cityCol = $(`<td>${newRow.City}</td>`);
            editCol = $(String.raw`<td><a onclick="alertNotSaved()">Edytuj</a></td>`);
            openCol = $(String.raw`<td><a  onclick="alertNotSaved()">Otwórz</a></td>`);
            closeCol = $(String.raw`<td><a  onclick="alertNotSaved()">Zamknij</a></td>`);
            deleteCol = $(String.raw`<td><a onclick="deleteTemp(` + newRow.TempId + String.raw`)">Usuń</a></td>`)
            row.append(nameCol, dateBornCol, dateClosedCol, isOpenedCol, cityCol, editCol, openCol, closeCol, deleteCol).prependTo("#packages-table");
        }

        function deleteTemp(id) {
            $("#packages-table tr").each(function(){
                if ($(this).attr("id") == `row-${id}`) {
                    $(this).remove();               
                }
            });
            newPackages = newPackages.filter(item => item.TempId != id);
            unhideLastRowInTable();
            return false;
        }
        function deleteQueryPackage(id){
            if(confirm("Czy na pewno chcesz usunąć paczkę?")){
                alert("Trwałe usunięcie paczki po zatwierdzeniu wszystkich zmian.");
                $("#packages-table tr").each(function () {
                    if ($(this).attr("id") == `row-${id}`) {
                        $(this).remove();
                    }
                });
                toDeleteQueryPackageIDs.push(id);
                unhideLastRowInTable();
            }
            //return false;
        }

        function alertNotSaved(){
            alert("Zapisz wszystko aby dokonywać operacji na paczkach")
        }

        function hideLastRowInTable(){
            hiddenEntities++;
            $(`#packages-table tr:nth-child(${numToHide})`).hide();
        }

        function unhideLastRowInTable(){
            var numToUnhide = numToHide;
            $(`#packages-table tr:nth-child(${numToUnhide})`).show();
        }

        function pushNewPackageToTable(){
            var currNumOfRowsOnPage = @Model.Query.Count() + newPackages.length;
            if(currNumOfRowsOnPage > 5){    // jesli w tabeli jest wiecej niz 5 elementow
                hideLastRowInTable();
            }
            appendNewRowToTable();
        }
        
        function incrementPageChoice() {
            var currPageItem = parseInt($("#PageChoice").val());
            var numPages = @numPages;
            if (currPageItem < numPages) {
                $("#PageChoice").val(currPageItem + 1);
            }

        }
        function decreasePageChoice() {
            var currPageItem = parseInt($("#PageChoice").val());
            if (currPageItem > 1) {
                $("#PageChoice").val(currPageItem - 1);
            }
        }

        $(".show-opened-input").change(function(){
            var value = $(this).val();
            $(".show-opened-input").val(value);
        });
        $(".show-closed-input").change(function () {
            var value = $(this).val();
            $(".show-closed-input").val(value);
        });
        $(".page-choice-input").change(function () {
            var value = $(this).val();
            $(".show-closed-input").val(value);
        });


        //$(document).delegate(".open-button","click",function(){
        //    var isOpened = $(this).closest("tr").find(".openedInfo").text();
        //    isOpened = isOpened.replace(/[^0-9A-Z]+/gi, "");
        //    //alert(isOpened);
        //    return (isOpened != 'True');
        //});

        //$(document).delegate(".close-button", "click", function () {
        //    var isOpened = $(this).closest("tr").find(".openedInfo").text();
        //    isOpened = isOpened.replace(/[^0-9A-Z]+/gi, "");
        //    //alert(isOpened);
        //    return (isOpened == 'True');
        //});

        $(document).delegate(".edit-button", "click", function(){
            var isOpened = $(this).closest("tr").find(".openedInfo").text();
            var rowId = $(this).closest("tr").attr("id");
            //alert(rowId);
            isOpened = isOpened.replace(/[^0-9A-Z]+/gi, "");
            isOpened = (isOpened == 'True');
            if(!isOpened){
                alert("Nie można edytować zamkniętej paczki.");
                $(this).addClass('disabled');
                return false;
            }
            var isOpened = isOpenedOnStart.find(element => element.Id == rowId).IsOpen;

            if (isOpened == 'True') {
                return confirm("Czy na pewno chcesz kontynuowac bez zapisywania?");
            }
            alert("Zatwierdź zmiany aby móc edytować otwartą paczkę");
            return false;
           
        });

        $("#accept-all-button").on("click", function(){
            alert("dada");
            if(confirm("Czy na pewno chcesz zapisac zmiany?")){
                $("#NewPackagesJSON").val(JSON.stringify(newPackages));
                $("#ToDeleteQueryPackageIDsJSON").val(JSON.stringify(toDeleteQueryPackageIDs));
                $("#ToUpdateQueryPackagesJSON").val(JSON.stringify(updatedQueryPackages));
                return true;
            }
            return false;
        });

        $("#change-page-button").on("click", function(){
            return confirm("Czy na pewno chcesz kontynować? Zmiana strony spowoduje utratę dokonanych zmian.");
        })

    </script>
}