@using System.Text.Json;
@using System.Text.Json.Serialization;
@using Newtonsoft.Json;
@using Paczki.Models;
@model EditPackageContentsModelView;
@{
    ViewData["Title"] = "Edit";
    var maxId = getMaxId();

    for(int i=0;i<Model.CountEmptyDeliveries;++i)
        Model.Query.Add(new Paczki.Dto.DeliveryDtoWithId() { Id = -1 });

}
@functions{
    int getMaxId()
    {
        var maxId = Model.Query.MaxBy(item => item.Id);
        if(maxId is null)
        {
            return 0;
        }
        return (int) maxId.Id;
    }
}
<form method="post">
    @Html.HiddenFor(model => model.CountEmptyDeliveries)
    @Html.HiddenFor(model => model.SourceIndexPageNum)
    @Html.HiddenFor(model => model.SourceShowOpenedPage)
    @Html.HiddenFor(model => model.SourceShowClosedPage)
    @Html.HiddenFor(model => model.IsPackageModified)


<h1>Formularz przesyłek</h1>
    <div class="float-start mb-3 mt-1">
@*        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
            Edytuj informacje o paczce
        </button>*@
    </div>
    <div class="float-stop mb-3 mt-1"><button asp-action="GoBack" asp-route-id="@Model.Package.PackageId" formmethod="get"
        class="btn btn-secondary float-end">Powrót do listy paczek</button></div>



<table class="table table-bordered table-striped" style="width:100%">
    <tr>
        <th>ID</th>
        <td>@Html.DisplayFor(model => model.Package.PackageId)
            @Html.HiddenFor(model => model.Package.PackageId)
        </td>
         
    </tr>
    <tr>
        <th>Nazwa</th>
        <td id="curr-name">@Html.EditorFor(model => model.Package.Name)</td>
    </tr>
    <tr>
        <th>Opened</th>
        <td>@Model.Package.Opened
            @Html.HiddenFor(model => model.Package.Opened)
        </td>
    </tr>
    <tr>
        <th>CreationDateTime</th>
            <td>@Html.DisplayFor(model => model.Package.CreationDateTime)
                @Html.HiddenFor(model => model.Package.CreationDateTime)
            </td>
    </tr>
    <tr>
        <th>ClosedDateTime</th>
            <td>@Html.DisplayFor( model => model.Package.ClosedDateTime)
                @Html.HiddenFor( model => model.Package.ClosedDateTime)
            </td>
    </tr>
    <tr>
        <th>DestinationCity</th>
            <td id="curr-city">@Html.EditorFor( model => model.Package.DestinationCity)</td>
    </tr>

</table>

@*
    <input class="form-control" type="text" name="delivery-name" id="delivery-name" style="width:30%;display:inline-block" placeholder="Tu wpisz nazwę nowej przesyłki" />
    <input class="form-control" type="number" step="0.01" name="delivery-weight" id="delivery-weight" style="width:25%;display:inline-block" placeholder="Tu wpisz wagę nowej przesyłki" />*@
    <button class="btn btn-secondary" id="addNewDeliveryButton" type="submit" style="width:200px" formmethod="post" asp-action="AddNewDelivery">
        Dodaj nową przesyłkę
    </button>
    <button class="btn btn-primary" id="resetButton" type="submit" style="width:100px; height:auto" formmethod="get" asp-action="ResetEditDeliveries">Resetuj</button>
    <button class="btn btn-primary float-end" type="submit" id="submit-all-button" asp-action="HandleEditDeliveries" style="width:280px">
        Zatwierdź wszystkie zmiany
    </button>


@Html.EditorFor(model => model.Query,"_ListDeliveryEditor")
</form>
@*<form action="javascript:void(0);" id="delivery-modify" style="width:100%; display:none">
    <input class="form-control" type="text" id="edit-delivery-name" style="width:30%;display:inline-block" />
    <input class="form-control" type="number" step="0.01" id="edit-delivery-weight" style="width:25%;display:inline-block"/>
    <input type="hidden" id="edit-delivery-id" value="" />
    <button class="btn btn-primary" type="submit" style="width:150px" id="edit-delivery-accept">
        Zatwierdź zmianę
    </button>
    <button class="btn btn-primary" style="width:150px" id="edit-delivery-decline">
        Anuluj
    </button>*@

@section Scripts{

<script type="text/javascript">
    var _foundDeliveryCount;
    var _deliveryCount;
    var tempDeliveries = [];
    var _foundDeliveries;
    var modifiedFoundDeliveries = [];
    var toRemoveFoundDeliveriesIds = [];
    var currPackageName;
    var currPackageCity;


    //function saveTempDelivery(name, weight,tempID) {
    //        tempDeliveries.push(new Delivery(name,weight,tempID));
    //}
    //function addTemporaryDelivery() {
    //        var inputWeight = $("#delivery-weight").val();
    //        var inputName = $("#delivery-name").val();
    //        saveTempDelivery(inputName, inputWeight, _deliveryCount);

    //        $("#delivery-weight").val("");
    //        $("#delivery-name").val("");

    //        var tbodyRef = document.getElementById('deliveryTable').getElementsByTagName('tbody')[0];
    //        var newRow = tbodyRef.insertRow();

    //        var newCellID = newRow.insertCell();
    //        var newCellName = newRow.insertCell();
    //        newCellName.id = `delivery-cell-name-id-${_deliveryCount}`;
    //        var newCellDate = newRow.insertCell();
    //        var newCellWeight = newRow.insertCell();
    //        newCellWeight.id = `delivery-cell-weight-id-${_deliveryCount}`;
    //        var newCellEdition = newRow.insertCell();
    //        var newCellDelete = newRow.insertCell();

    //        var textNodeID = document.createTextNode(_deliveryCount.toString());
    //        var textNodeName = document.createTextNode(inputName);
    //        var textNodeDate = document.createTextNode("teraz!");
    //        var textNodeWeight = document.createTextNode(inputWeight);
    //        newCellEdition.innerHTML =
    //            `<a class="edit-delivery" style="cursor:pointer" data-id=${_deliveryCount}>Edytuj</a>`;

    //        newCellDelete.innerHTML =
    //            `<a class="delete-delivery" style="cursor:pointer" data-id=${_deliveryCount}>Usun</a>`;

    //        newCellID.appendChild(textNodeID);
    //        newCellName.appendChild(textNodeName);
    //        newCellDate.appendChild(textNodeDate);
    //        newCellWeight.appendChild(textNodeWeight);

    //        _deliveryCount++;
    //}

    //function updateEditModal(){
    //        $("#NewPackageName").attr("placeholder", currPackageName);
    //        $("#NewPackageCity").attr("placeholder", currPackageCity);
    //}
        $(window).on('load', function () {

            var limitReached = @((TempData["AddNewEmptyDelivery"] != null).ToString().ToLower());
            if(limitReached == true){
                alert('@TempData["AddNewEmptyDelivery"]');
            }
        }
        );

        $("#submit-all-button").on("click", function(){
            if ($("#Package_Name").val() == ''){
                alert("Pole nazwy paczki nie może pozostać puste.");
                return false;
            }
            else{
                return confirm("Przesyłki z pustą nazwą lub wagą <0.01 nie zostaną dodane lub nadpisane. Czy na pewno chcesz kontynuować?")
            }
        })

        $("input[name^=Query]").on("change",function(){
            $(this).closest("tr").find("input[name$=IsModified]").val("True");
        })

        $("#curr-name,#curr-city").on("change", function(){
            $("#IsPackageModified").val("True");
        })

        $(".deleteDeliveryButton").on("click", function(){
            //alert($(this).attr("id"));
            $(this).closest("tr").find("input[name$=IsDeleted]").val("True");
            //$("#submit-all-button").trigger("click");
            $(this).closest("tr").hide();

        })

        $("#addNewDeliveryButton").on("click", function(){
            var currEmptyDeliveriesCount = parseInt($("#CountEmptyDeliveries").val()) + 1;
            if (currEmptyDeliveriesCount <= 10){
                $("#CountEmptyDeliveries").val(currEmptyDeliveriesCount);
            }
        })
    
        function findDelivery(arr,id){
            return arr.find(element => element.Id == id);
        }

    $("#delivery-modify").on("submit", function(){
        var modifiedName = $("#edit-delivery-name").val();
        var modifiedWeight = $("#edit-delivery-weight").val();
        var deliveryId = $("#edit-delivery-id").val();
        //alert("curr delivery id=" + deliveryId);
        if (modifiedName != "" && modifiedWeight != "") {
            modifiedFoundDeliveries.push(new Delivery(modifiedName,modifiedWeight,deliveryId));
        }
        updateDeliveries(new Delivery(modifiedName,modifiedWeight,deliveryId));
        $("#edit-delivery-name").val("");
        $("#edit-delivery-weight").val("");
        $("#delivery-modify").css("display","none");
        return false;   // nie chcemy submitowac, wszystko w jsie jest robione
    });


    // nie pozwalaj robic submita enterem
    $(document).on("keydown", "form", function (event) {
        return event.key != "Enter";
    });


</script>
}